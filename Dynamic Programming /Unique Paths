// memorization 1ts*****
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[n][m];
        for(int[] row :  dp){
            Arrays.fill(row, -1);
        }
        return helper(n-1,m-1,dp);
    }
    public int helper(int i, int j, int[][] dp){
            if(j < 0 || i < 0) return 0;
            if(i == 0 && j == 0) return 1;
            if(dp[i][j] != -1) return dp[i][j];
            int up = helper(i-1,j,dp);
            int left = helper(i,j-1,dp);
            return dp[i][j] = up + left;
    }
}


[[[[[]]]]]]]]]]]]]]]]]]]]]][[[[[[[[[[[[]]]]]]]]]]]]]]
// bottom up tabulation






class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[n][m];
        for(int[] row :  dp){
            Arrays.fill(row, -1);
        }
        //return helper(n-1,m-1,dp);
        return helper2(n,m);
    }
    public int helper(int i, int j, int[][] dp){
            if(j < 0 || i < 0) return 0;
            if(i == 0 && j == 0) return 1;
            if(dp[i][j] != -1) return dp[i][j];
            int up = helper(i-1,j,dp);
            int left = helper(i,j-1,dp);
            return dp[i][j] = up + left;
    }
     public int helper2(int n, int m){
            int[][] dp = new int[n][m];
           for(int i = 0 ; i < n; i++){
            for(int j = 0 ;  j < m ; j++){
                    if( i == 0 && j == 0) dp[0][0] = 1;
                    else{
                    int up = 0;
                    int left = 0;
                    if(i > 0) up = dp[i-1][j];
                    if(j > 0) left = dp[i][j-1];
                    dp[i][j] = up+left;
                    }
            } 
           }
           return dp[n-1][m-1];
     }
}









