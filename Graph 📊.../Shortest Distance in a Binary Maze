import java.util.LinkedList;
import java.util.Queue;

class Solution {

    class Tuple {
        int dist;
        int row;
        int col;

        Tuple(int dist, int row, int col) {
            this.dist = dist;
            this.row = row;
            this.col = col;
        }
    }

    int shortestPath(int[][] grid, int[] source, int[] destination) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dist = new int[n][m];
        
        if (source[0] == destination[0] && source[1] == destination[1]) {
            return 0;
        }
        
        Queue<Tuple> q = new LinkedList<>();
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dist[i][j] = (int) 1e9;
            }
        }
        
        dist[source[0]][source[1]] = 0;
        q.add(new Tuple(0, source[0], source[1]));
        
        int[] dr = {-1, 0, 1, 0};
        int[] dc = {0, 1, 0, -1};
        
        while (!q.isEmpty()) {
            Tuple current = q.poll();
            int currDist = current.dist;
            int r = current.row;
            int c = current.col;
            
            for (int i = 0; i < 4; i++) {
                int newRow = r + dr[i];
                int newCol = c + dc[i];
                
                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m 
                    && grid[newRow][newCol] == 1 && currDist + 1 < dist[newRow][newCol]) {
                    
                    dist[newRow][newCol] = currDist + 1;

                    if (newRow == destination[0] && newCol == destination[1]) {
                        return currDist + 1;
                    }
                    
                    q.add(new Tuple(currDist + 1, newRow, newCol));
                }
            }
        }
        
        return -1;  // If no path is found from source to destination.
    }
}
Shortest Distance in a Binary Maze
