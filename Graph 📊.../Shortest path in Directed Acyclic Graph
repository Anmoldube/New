class Solution {
     static class Pair {
        int v;
        int weight;

        Pair(int v, int weight) {
            this.v = v;
            this.weight = weight;
        }
    }
	public int[] shortestPath(int N,int M, int[][] edges) {
	    // Create adjacency list
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges to the adjacency list
        for (int i = 0; i < M; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj.get(u).add(new Pair(v, wt));
        }

        // Array to store visited nodes
        int[] vis = new int[N];
        Stack<Integer> st = new Stack<>();

        // Perform topological sort
        for (int i = 0; i < N; i++) {
            if (vis[i] == 0) {
                topoSort(i, adj, st, vis);
            }
        }

        // Initialize distances
        int[] dist = new int[N];
        Arrays.fill(dist, (int) 1e9);
        dist[0] = 0; // Assuming 0 is the source node

        // Relax edges according to topological order
        while (!st.isEmpty()) {
            int node = st.pop();

            if (dist[node] != 1e9) {
                for (Pair neighbor : adj.get(node)) {
                    int v = neighbor.v;
                    int wt = neighbor.weight;
                    if (dist[node] + wt < dist[v]) {
                        dist[v] = dist[node] + wt;
                    }
                }
            }
        }

        // Replace 'infinity' values with -1 to indicate unreachable nodes
        for (int i = 0; i < N; i++) {
            if (dist[i] == 1e9) {
                dist[i] = -1;
            }
        }

        return dist;
    }

    private void topoSort(int node, ArrayList<ArrayList<Pair>> adj, Stack<Integer> st, int[] vis) {
        vis[node] = 1;
        for (Pair neighbor : adj.get(node)) {
            int v = neighbor.v;
            if (vis[v] == 0) {
                topoSort(v, adj, st, vis);
            }
        }
        st.push(node);
    }

}
