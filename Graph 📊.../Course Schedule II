class Solution {
    public int[] findOrder(int n, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        
        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }

        int[] vis = new int[n];
        int[] pathvis = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            if (vis[i] == 0) {
                if (dfs(i, adj, vis, pathvis, stack)) {
                    return new int[0]; // return empty array if a cycle is detected
                }
            }
        }

        int[] order = new int[n];
        int index = 0;
        while (!stack.isEmpty()) {
            order[index++] = stack.pop();
        }

        return order;
    }

    private boolean dfs(int node, List<List<Integer>> adj, int[] vis, int[] pathvis, Stack<Integer> stack) {
        vis[node] = 1;
        pathvis[node] = 1;

        for (int it : adj.get(node)) {
            if (vis[it] == 0) {
                if (dfs(it, adj, vis, pathvis, stack)) {
                    return true;
                }
            } else if (pathvis[it] == 1) {
                return true; // cycle detected
            }
        }

        pathvis[node] = 0;
        stack.push(node);
        return false;
    }
}
