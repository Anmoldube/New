class Solution {
    static int knapSack(int n, int w, int val[], int wt[]) {
        int[][] dp = new int[n][w + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(n - 1, w, val, wt, dp);
    }

    public static int helper(int i, int w, int[] val, int[] wt, int[][] dp) {
        if (i == 0) {
            if (wt[0] <= w) return (w / wt[0]) * val[0];
            else return 0;
        }
        if (dp[i][w] != -1) return dp[i][w];

        int nottake = helper(i - 1, w, val, wt, dp);
        int take = 0;
        if (wt[i] <= w) {
            take = val[i] + helper(i , w - wt[i], val, wt, dp);
        }
        return dp[i][w] = Math.max(take, nottake);
    }
}
