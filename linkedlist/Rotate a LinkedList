/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || k == 0) return head;

        // Find the length of the linked list
        ListNode tail = head;
        int n = 1; // Initialize to 1 to count the head node
        while (tail.next != null) {
            tail = tail.next;
            n++;
        }

        // Update k to be within the range [0, n-1]
        k = k % n;
        if (k == 0) return head; // No rotation needed
        
        // Find the new tail node and the new head node
        ListNode newTail = head;
        for (int i = 0; i < n - k - 1; i++) {
            newTail = newTail.next;
        }
        ListNode newHead = newTail.next;
        
        // Break the link between newTail and newHead, and link the tail to the original head
        newTail.next = null;
        tail.next = head;

        return newHead;
    }
}
