class Solution {
    private static final int MOD = 1000000007;
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n=obstacleGrid.length, m=obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        for(int[] row :  dp){
            Arrays.fill(row, -1);
        }
        return helper(n-1,m-1,dp,obstacleGrid);
    }
    public int helper(int i, int j,int[][] dp,int[][] obstacleGrid){
         if (i >= 0 && j >= 0 && obstacleGrid[i][j] == 1) {
            return 0;
        }
        // Base case: the starting point
        if (i == 0 && j == 0) {
            return obstacleGrid[0][0] == 1 ? 0 : 1;
        }
        // If out of bounds
        if (i < 0 || j < 0) {
            return 0;
        }
        // If already computed
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        // Recurrence relation
        int up = helper(i - 1, j, dp, obstacleGrid);
        int left = helper(i, j - 1, dp, obstacleGrid);
        
        dp[i][j] = (up + left) ;
        return dp[i][j];
    }
}
