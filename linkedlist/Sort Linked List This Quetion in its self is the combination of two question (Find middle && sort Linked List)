/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        // Base case: if the list is empty or has only one node, it is already sorted
        if (head == null || head.next == null) {
            return head;
        }
        
        // Find the middle node of the list
       ListNode mid=Middle(head);

        ListNode left=sortList(head);
        ListNode right=sortList(mid);

        return merge(left,right);
    }
    
    // Helper function to find the middle node of a list using the slow and fast pointer technique
    public ListNode Middle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        ListNode mid = slow.next;
        slow.next = null; // Split the linked list
        return mid;
    }
    
    // Helper function to merge two sorted lists
    public ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(); // Dummy node to simplify the code
        ListNode temp = dummy; // Pointer to the current node of the merged list
        
        // Traverse both lists and compare the values of their nodes
        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                temp.next = list1;
                list1 = list1.next;
            } else {
                temp.next = list2;
                list2 = list2.next;
            }
            temp = temp.next; // Move temp to the next node in the merged list
        }
        
        // Append the remaining nodes of the non-empty list
        if (list1 != null) {
            temp.next = list1;
        }
        if (list2 != null) {
            temp.next = list2;
        }
        
        return dummy.next; // Return the head of the merged list
    }
}
