class Solution {
    public int longestPalindromeSubseq(String s) {
        String s2 = new StringBuilder(s).reverse().toString(); // Reverse the string
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(n - 1, n - 1, s, s2, dp);
    }

    private int helper(int i, int j, String s1, String s2, int[][] dp) {
        if (i < 0 || j < 0) return 0; // Base case when indices are out of bounds
        if (dp[i][j] != -1) return dp[i][j];
        if (s1.charAt(i) == s2.charAt(j)) {
            dp[i][j] = 1 + helper(i - 1, j - 1, s1, s2, dp); // Characters match, include them in the subsequence
        } else {
            dp[i][j] = Math.max(helper(i - 1, j, s1, s2, dp), helper(i, j - 1, s1, s2, dp)); // Characters do not match, exclude one
        }
        return dp[i][j];
    }
}
