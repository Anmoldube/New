class Solution{
    private int mod = (int)(1e9 + 7);

	public int perfectSum(int arr[],int n, int sum) { 
        // Using Tabulation - Bottom-Up Approach
        
        // Create a int DP table with dimensions [n][sum + 1]
        int[][] dp = new int[n][sum + 1];
        
        // Populating DP with weird Base Case 
        if(arr[0] == 0)
		        dp[0][0] = 2; // There are two ways to achieve a sum of 0: by selecting or not selecting the first element.
        else 
            dp[0][0] = 1; // There is always one way to achieve a sum of 0: by selecting no elements.
            
        for(int j = 1; j <= sum; j++) {
            if(arr[0] == j)
                dp[0][j] = 1;
        }
        
        // Fill in the DP table using bottom-up approach
        for(int i = 1; i < n; i++) {
            
            for(int j = 0; j <= sum; j++) {
            
                // non-pick
                int nonPick = dp[i-1][j];
                
                // pick
                int pick = 0;
                
                if(arr[i] <= j)
                    pick = dp[i-1][j - arr[i]];
                
                // storing result in dp table
                dp[i][j] = (nonPick + pick) % mod;
            }
        }
        
        // The final result is stored in the bottom-right cell of the DP table
        return dp[n-1][sum];
	}
}
