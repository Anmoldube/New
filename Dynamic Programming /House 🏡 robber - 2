class Solution {
    public int rob(int[] nums) {
           if (nums.length == 0) return 0; // Handle empty array case
        if (nums.length == 1) return nums[0]; // Handle single element case
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
            int[] skiplast = new int[nums.length-1];
            int[] skipfirst = new int[nums.length-1];
            for(int i = 0; i < nums.length-1;i++){
                    skiplast[i] = nums[i];
                    skipfirst[i] = nums[i+1];
            }
            int fromlast = robber(skiplast);
            int fromfirst = robber(skipfirst);
            return Math.max(fromlast,fromfirst);
    }
    public int robber(int[] nums){
        int[] dp = new int[nums.length];
        dp[0] =  nums[0];
        dp[1] = Math.max(nums[0],nums[1]);
        for(int i =2; i< nums.length;i++){
            int rob = nums[i]+dp[i-2]; 
            int do_rob = dp[i-1]; 
            dp[i] = Math.max(rob,do_rob);
           dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        return dp[nums.length-1]; 
    }
}
