class Solution {
    public List<Integer> majorityElement(int[] arr) {
        int n = arr.length;
        int cnt1 = 0, el1 = Integer.MIN_VALUE;
        int cnt2 = 0, el2 = Integer.MIN_VALUE;

        // First pass: Find potential majority elements
        for (int i = 0; i < n; i++) {
            if (el1 == arr[i]) {
                cnt1++;
            } else if (el2 == arr[i]) {
                cnt2++;
            } else if (cnt1 == 0) {
                el1 = arr[i];
                cnt1 = 1;
            } else if (cnt2 == 0) {
                el2 = arr[i];
                cnt2 = 1;
            } else {
                cnt1--;
                cnt2--;
            }
        }

        // Second pass: Verify the counts of el1 and el2
        cnt1 = 0;
        cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == el1) cnt1++;
            else if (arr[i] == el2) cnt2++;
        }

        List<Integer> result = new ArrayList<>();
        int mini = n / 3; // Majority element appears more than n/3 times
        if (cnt1 > mini) result.add(el1);
        if (cnt2 > mini) result.add(el2);

        return result;
    }
}
