class Solution {
    private int timer = 0;

    // Depth-First Search (DFS) function
    private void dfs(int node, int parent, int[] vis, ArrayList<ArrayList<Integer>> adj, int[] tim, int[] low,
            List<List<Integer>> bridge) {
        vis[node] = 1; // Mark the current node as visited
        tim[node] = low[node] = timer; // Set discovery and low times
        timer++; // Increment timer

        for (Integer it : adj.get(node)) { // Traverse all adjacent nodes
            if (it == parent) // Skip the parent node
                continue;
            if (vis[it] == 0) { // If the adjacent node is not visited
                dfs(it, node, vis, adj, tim, low, bridge); // Recursively perform DFS
                low[node] = Math.min(low[node], low[it]); // Update low value

                // Check if the edge is a bridge
                if (low[it] > tim[node]) {
                    bridge.add(Arrays.asList(it, node)); // Add bridge to the list
                }
            } else {
                low[node] = Math.min(low[node], low[it]); // Update low value if already visited
            }
        }
    }

    // Function to find all critical connections
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(); // Adjacency list

        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>()); // Initialize adjacency list
        }

        for (List<Integer> it : connections) { // Populate adjacency list
            int u = it.get(0);
            int v = it.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int[] vis = new int[n]; // Array to track visited nodes
        int[] tim = new int[n]; // Array to store discovery times
        int[] low = new int[n]; // Array to store low values
        List<List<Integer>> bridge = new ArrayList<>(); // List to store bridges

        // Perform DFS from the first node
        dfs(0, -1, vis, adj, tim, low, bridge);

        return bridge; // Return the list of bridges
    }
}
