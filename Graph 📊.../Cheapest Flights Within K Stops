class Solution {
    class pair{
        int first;
        int second;
        pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }
    class tuple{
        int first,second,third;
        tuple(int first, int second, int third){
            this.first = first;
            this.second = second;
            this.third = third;
        }

    }
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Queue<tuple> q = new LinkedList<>();
        ArrayList<ArrayList<pair>> adj = new ArrayList<>();
        for(int i = 0;i < n; i++){
            adj.add(new ArrayList<>());
        }
        int m = flights.length;
        for(int i  =0; i < m;i++){
            adj.get(flights[i][0]).add(new pair(flights[i][1],flights[i][2]));
        }
        q.add(new tuple(0,src,0));
        int[] dist = new int[n];
        Arrays.fill(dist,(int)1e9);
        dist[src] = 0;
        while(!q.isEmpty()){
            tuple it = q.peek();
            q.remove();
            int stop = it.first;
            int node = it.second;
            int cost = it.third;
            if(stop > k){
                continue;
            }           
            for(pair iter : adj.get(node)){
                int adjNode = iter.first;
                int edw = iter.second;
                if(cost + edw < dist[adjNode] && stop <= k){
                    dist[adjNode] = cost + edw;
                    q.add(new tuple(stop + 1 ,adjNode, cost + edw));
                }
            }
        }
        if(dist[dst] == (int)(1e9)) return -1;
        return dist[dst];
    }
}
