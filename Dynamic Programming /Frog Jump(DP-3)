class Solution{
    public int minimumEnergy(int stones[],int N){
         int n = stones.length;
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return helper(stones, n - 1, dp);
    }

    public int helper(int[] arr, int i, int[] dp) {
        if (i == 0) return 0; // No cost to stand on the first stone
        if (i == 1) return Math.abs(arr[1] - arr[0]); // Cost to jump to the second stone
        if (dp[i] != -1) return dp[i];

        int left = helper(arr, i - 1, dp) + Math.abs(arr[i] - arr[i - 1]);
        int right = Integer.MAX_VALUE;
        if (i > 1) right = helper(arr, i - 2, dp) + Math.abs(arr[i] - arr[i - 2]);
        
        dp[i] = Math.min(left, right);
        return dp[i];
    }
}
