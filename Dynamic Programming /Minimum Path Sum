class Solution {
    public int minPathSum(int[][] grid) {
            int n = grid.length, m = grid[0].length;
        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(0, 0, grid, dp);
    }

    public int helper(int i, int j, int[][] grid, int[][] dp) {
        if (i >= grid.length || j >= grid[0].length) {
            return Integer.MAX_VALUE;
        }
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return grid[i][j];
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int down = helper(i + 1, j, grid, dp);
        int right = helper(i, j + 1, grid, dp);
        dp[i][j] = grid[i][j] + Math.min(down, right);
        return dp[i][j];
    }
}
