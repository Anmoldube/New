import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    // Function to return list containing vertices in Topological order.
    static int[] topoSort(int n, ArrayList<ArrayList<Integer>> adj) {
        int[] indegree = new int[n];
        int[] topo = new int[n];

        // Calculate in-degrees of all nodes
        for (int i = 0; i < n; i++) {
            for (int it : adj.get(i)) {
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        // Add all nodes with in-degree 0 to the queue
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }

        int index = 0;
        // Perform Kahn's Algorithm
        while (!q.isEmpty()) {
            int node = q.poll(); // Use poll instead of peek and remove
            topo[index++] = node;

            // Reduce the in-degree of all adjacent nodes
            for (int it : adj.get(node)) {
                indegree[it]--;
                // If in-degree becomes zero, add it to the queue
                if (indegree[it] == 0) {
                    q.add(it);
                }
            }
        }

        // Return the topological order
        return topo;
    }
}
