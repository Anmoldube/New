Same as buy and sell stock ii but - fee 

class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n][2]; // dp[i][0] -> no stock in hand, dp[i][1] -> stock in hand
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return helper(0, 1, prices, dp, n,fee);
    }

    public int helper(int i, int holding, int[] prices, int[][] dp, int n,int fee) {
        if (i == n) {
            return 0;
        }
        if (dp[i][holding] != -1) {
            return dp[i][holding];
        }

        if (holding == 1) { // We have stock in hand, we can sell it or hold it
            dp[i][holding] = Math.max(-prices[i] + helper(i + 1, 0, prices, dp, n,fee), // Sell the stock
                                      helper(i + 1, 1, prices, dp, n,fee)); // Hold the stock
        } else { // We don't have stock in hand, we can buy it or do nothing
            dp[i][holding] = Math.max(prices[i]-fee + helper(i + 1, 1, prices, dp, n,fee), // Buy the stock with cooldown
                                      helper(i + 1, 0, prices, dp, n,fee)); // Do nothing
        }

        return dp[i][holding];
    }
}
